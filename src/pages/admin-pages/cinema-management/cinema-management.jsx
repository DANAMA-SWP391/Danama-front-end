import React, { useState, useEffect } from 'react';
import { fetchAddCinema, fetchCinemaList, fetchDeleteCinema, fetchUpdateCinema } from "../../../api/admin-api.js";
import Sidebar from "../../../components/common/AdminSideBar/AdminSideBar.jsx";

const CinemaManagement = () => {
    const [cinemas, setCinemas] = useState([]);  // Qu·∫£n l√Ω danh s√°ch r·∫°p chi·∫øu phim
    const [loading, setLoading] = useState(true);  // Qu·∫£n l√Ω tr·∫°ng th√°i loading
    const [error, setError] = useState(null);  // Qu·∫£n l√Ω l·ªói n·∫øu c√≥
    const [newCinema, setNewCinema] = useState({ name: '', logo: '', address: '', description: '', managerId: '' }); // Qu·∫£n l√Ω th√¥ng tin r·∫°p m·ªõi
    const [editCinemaId, setEditCinemaId] = useState(null); // Qu·∫£n l√Ω ID r·∫°p ƒëang ch·ªânh s·ª≠a

    // L·∫•y danh s√°ch r·∫°p chi·∫øu phim khi component mount
    useEffect(() => {
        const getCinemas = async () => {
            try {
                const data = await fetchCinemaList();  // G·ªçi API l·∫•y danh s√°ch r·∫°p
                if (data) {
                    setCinemas(data);  // L∆∞u danh s√°ch r·∫°p v√†o state
                }
            } catch (err) {
                setError(err.message);  // B·∫Øt l·ªói n·∫øu c√≥
            } finally {
                setLoading(false);  // T·∫Øt tr·∫°ng th√°i loading khi API ho√†n t·∫•t
            }
        };
        getCinemas();
    }, []);

    // Th√™m m·ªõi r·∫°p chi·∫øu phim
    const handleAddCinema = async () => {
        const success = await fetchAddCinema(newCinema);
        if (success) {
            alert('Cinema added successfully!');
            setCinemas([...cinemas, newCinema]); // C·∫≠p nh·∫≠t danh s√°ch r·∫°p
            setNewCinema({ name: '', logo: '', address: '', description: '', managerId: '' }); // Reset form
        } else {
            alert('Failed to add cinema.');
        }
    };

    // Khi nh·∫•n n√∫t Edit, hi·ªÉn th·ªã th√¥ng tin r·∫°p trong form ƒë·ªÉ ch·ªânh s·ª≠a
    const handleEditCinema = (cinema) => {
        setEditCinemaId(cinema.cinemaId); // ƒê·∫∑t ID r·∫°p ƒëang ch·ªânh s·ª≠a
        setNewCinema({  // ƒê∆∞a th√¥ng tin r·∫°p hi·ªán t·∫°i v√†o form
            cinemaId: cinema.cinemaId,
            name: cinema.name,
            logo: cinema.logo,
            address: cinema.address,
            description: cinema.description,
            managerId: cinema.managerId
        });
    };

    // C·∫≠p nh·∫≠t r·∫°p chi·∫øu phim
    const handleUpdateCinema = async () => {
        console.log("Updating cinema with ID:", newCinema.cinemaId);
        console.log("Cinema details:", newCinema);

        const success = await fetchUpdateCinema(newCinema); // G·ªçi API v·ªõi ƒë·ªëi t∆∞·ª£ng cinema
        if (success) {
            alert('Cinema updated successfully!');
            setCinemas(cinemas.map((cinema) => (cinema.cinemaId === newCinema.cinemaId ? { ...cinema, ...newCinema } : cinema)));
            setEditCinemaId(null);
            setNewCinema({ name: '', logo: '', address: '', description: '', managerId: '' });
        } else {
            alert('Failed to update cinema.');
        }
    };

    // X√≥a r·∫°p chi·∫øu phim
    const handleDeleteCinema = async (cinemaId) => {
        const success = await fetchDeleteCinema(cinemaId);
        if (success) {
            alert('Cinema deleted successfully!');
            setCinemas(cinemas.filter((cinema) => cinema.cinemaId !== cinemaId)); // Lo·∫°i b·ªè r·∫°p kh·ªèi danh s√°ch
        } else {
            alert('Failed to delete cinema.');
        }
    };

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p d·ªØ li·ªáu v√†o form
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewCinema((prevState) => ({
            ...prevState,
            [name]: value,
        }));
    };

    // Hi·ªÉn th·ªã loading
    if (loading) {
        return <p>Loading cinemas...</p>;
    }

    // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
    if (error) {
        return <p>Error: {error}</p>;
    }

    return (
        <div className="cinema-list-container">
            <Sidebar /> {/* Sidebar */}
            <div className="cinema-list-content">
                <div className="cinema-list-header">
                    <h2>{editCinemaId ? 'EDIT CINEMA' : 'ADD CINEMA'}</h2>
                    {editCinemaId ? (
                        <button className="save-cinema-btn" onClick={handleUpdateCinema}>Save Cinema</button>
                    ) : (
                        <button className="add-cinema-btn" onClick={handleAddCinema}>+ Add new cinema</button>
                    )}
                </div>

                {/* Form th√™m m·ªõi ho·∫∑c ch·ªânh s·ª≠a r·∫°p chi·∫øu */}
                <div className="cinema-form">
                    <input type="text" name="name" value={newCinema.name} onChange={handleInputChange} placeholder="Cinema Name" />
                    <input type="text" name="logo" value={newCinema.logo} onChange={handleInputChange} placeholder="Logo URL" />
                    <input type="text" name="address" value={newCinema.address} onChange={handleInputChange} placeholder="Address" />
                    <input type="text" name="description" value={newCinema.description} onChange={handleInputChange} placeholder="Description" />
                    <input type="text" name="managerId" value={newCinema.managerId} onChange={handleInputChange} placeholder="Manager ID" />
                </div>

                {/* Danh s√°ch r·∫°p chi·∫øu */}
                <table className="cinema-table">
                    <thead>
                    <tr>
                        <th>Cinema's ID</th>
                        <th>Name</th>
                        <th>Logo</th>
                        <th>Manager</th>
                        <th>Address</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody>
                    {cinemas.map((cinema) => (
                        <tr key={cinema.cinemaId}>
                            <td>{cinema.cinemaId}</td>
                            <td>{cinema.name}</td>
                            <td><img src={cinema.logo} alt={cinema.name} className="cinema-logo" /></td>
                            <td>{cinema.managerId}</td>
                            <td>{cinema.address}</td>
                            <td>
                                <button className="edit-btn" onClick={() => handleEditCinema(cinema)}>‚úèÔ∏è</button>
                                <button className="delete-btn" onClick={() => handleDeleteCinema(cinema.cinemaId)}>üóëÔ∏è</button>
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default CinemaManagement;
